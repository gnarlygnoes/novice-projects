package game

import (
	"goup/levels"

	rl "github.com/gen2brain/raylib-go/raylib"
)

type Tile struct {
	Rec    rl.Rectangle
	Colour rl.Color
}

func GenerateTileMap() (groundTiles []Tile, platformTiles []Tile, enemies []Enemy) {
	// var groundTiles []Tile
	// var platformTiles []Tile

	// x := [][]int32{
	// 	{0, 0, 0, 2, 2, 2, 2, 2, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 2, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 2, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 2, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 2, 2, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 2, 2, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 2, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 2, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 2, 0, 0, 1},
	// 	{0, 0, 0, 0, 2, 0, 0, 0, 0, 1},
	// 	{0, 0, 0, 0, 0, 0, 0, 0, 2, 1},
	// 	{0, 0, 0, 2, 2, 2, 2, 2, 2, 1},
	// }
	x := levels.GenerateGameLevels()

	// inData := []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 	931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931,
	// 	963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963,
	// 	963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963,
	// 	995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995
	// }

	// var x [30][21]int32
	// var row, col int

	// for i := range inData {
	// 	if i%30 == 0 {
	// 		col++
	// 		row = 0
	// 	}
	// 	x[row][col] = inData[i]
	// 	row++
	// }

	tileWidth := ScreenWidth / 10
	tileHeight := ScreenHeight / 10

	for i := range x {
		for j, tile := range x[i] {
			switch tile {
			case 1:
				tile := Tile{
					Rec: rl.Rectangle{
						X:      float32(tileWidth * i),
						Y:      float32(tileHeight * j),
						Width:  float32(tileWidth),
						Height: float32(tileHeight),
					},
					Colour: rl.Green,
				}
				groundTiles = append(groundTiles, tile)
			case 2:
				tile := Tile{
					Rec: rl.Rectangle{
						X:      float32(tileWidth * i),
						Y:      float32(tileHeight * j),
						Width:  float32(tileWidth),
						Height: float32(tileHeight),
					},
					Colour: rl.Brown,
				}

				platformTiles = append(platformTiles, tile)
			}
		}
	}

	e1 := MakeEnemy(1800, 500, true)

	enemies = append(enemies, e1)

	return groundTiles, platformTiles, enemies
}

// func (g *Game) AddEnemies() {
// 	e1 := MakeEnemy(1500, 1000)
// 	g.Enemies(e1)
// }
